// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0 <0.7.0;

import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeecore/Ownable.sol";


/// @title SupplyChain
/// @dev Define a contract 'Supplychain'
contract SupplyChain is
    ConsumerRole,
    DistributorRole,
    FarmerRole,
    RetailerRole,
    Ownable
{
    /// @dev Define 'owner'
    // address payable owner;

    /// @dev Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    /// @dev Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku;

    /// @dev Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    /// @dev Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint256 => string[]) itemsHistory;

    /// @dev Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    /// @dev default enum State
    State constant defaultState = State.Harvested;

    /// @dev Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address payable originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address payable consumerID; // Metamask-Ethereum address of the Consumer
    }

    /// @dev Define 8 events with the same 8 state values and accept 'upc' as input argument
    /// @param upc Universal Product Code (UPC) generated by the Farmer
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    /// @dev Define a modifer that checks to see if msg.sender == owner of the contract
    // modifier onlyOwner() {
    //     require(msg.sender == owner, "You're not the owner");
    //     _;
    // }

    /// @dev Define a modifer that verifies the Caller
    /// @param _address The address that has to be matched to the Caller
    modifier verifyCaller(address _address) {
        require(
            msg.sender == _address,
            "The address does not match the Caller"
        );
        _;
    }

    /// @dev Define a modifier that checks if the paid amount is sufficient to cover the price
    /// @param _price The price of the product to be compared to the amount paid
    modifier paidEnough(uint256 _price) {
        require(
            msg.value >= _price,
            "The paid amount is insufficient to cover the price"
        );
        _;
    }

    /// @dev Define a modifier that checks the price and refunds the remaining balance
    /// @param _upc Universal Product Code (UPC) to track the productPrice from mapping items
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        items[_upc].consumerID.transfer(amountToReturn);
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Harvested
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier harvested(uint256 _upc) {
        require(
            items[_upc].itemState == State.Harvested,
            "The item is not harvested"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Processed
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier processed(uint256 _upc) {
        require(
            items[_upc].itemState == State.Processed,
            "The item is not processed"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Packed
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier packed(uint256 _upc) {
        require(
            items[_upc].itemState == State.Packed,
            "The item is not packed"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is ForSale
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier forSale(uint256 _upc) {
        require(
            items[_upc].itemState == State.ForSale,
            "The item is not for sale"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Sold
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier sold(uint256 _upc) {
        require(items[_upc].itemState == State.Sold, "The item is not sold");
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Shipped
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier shipped(uint256 _upc) {
        require(
            items[_upc].itemState == State.Shipped,
            "The item is not shipped"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Received
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier received(uint256 _upc) {
        require(
            items[_upc].itemState == State.Received,
            "The item is not received"
        );
        _;
    }

    /// @dev Define a modifier that checks if an item.state of a upc is Purchased
    /// @param _upc Universal Product Code (UPC) to search for itemState from mapping items
    modifier purchased(uint256 _upc) {
        require(
            items[_upc].itemState == State.Purchased,
            "The item is not purchased"
        );
        _;
    }

    /// @dev Check to see if an item already exists
    /// @param _upc Universal Product Code (UPC) to search for an existing item
    modifier itemExists(uint256 _upc) {
        require(
            items[_upc].upc == 0,
            "The item with a matching UPC already exists"
        );
        _;
    }

    /** @dev In the constructor set 'owner' to the address that instantiated the contract
     * and set 'sku' to 1
     * and set 'upc' to 1
     */
    constructor() public payable {
        origOwner = msg.sender;
        sku = 1;
        upc = 1;
    }

    /// @dev Define a function 'kill' if required
    function kill() public {
        if (msg.sender == origOwner) {
            selfdestruct(msg.sender);
        }
    }

    /// @dev Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address payable _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    ) public itemExists(_upc) onlyFarmer {
        /// @dev Add the new item as part of Harvest
        items[_upc].sku = sku;
        items[_upc].upc = upc;
        items[_upc].ownerID = _originFarmerID;
        items[_upc].originFarmerID = _originFarmerID;
        items[_upc].originFarmName = _originFarmName;
        items[_upc].originFarmInformation = _originFarmInformation;
        items[_upc].originFarmLatitude = _originFarmLatitude;
        items[_upc].originFarmLongitude = _originFarmLongitude;
        items[_upc].productID = _upc + sku;
        items[_upc].productNotes = _productNotes;
        items[_upc].itemState = State.Harvested;

        /// @dev Increment sku
        sku = sku + 1;

        /// @dev Emit the appropriate event
        emit Harvested(_upc);
    }

    /// @dev Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    /// @param _upc UPC to select the specific item to be processed
    function processItem(uint256 _upc)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        /// @param _upc UPC to select the item's state from mapping items
        harvested(_upc)
        /// @dev Call modifier to verify caller of this function
        /// @param items[_upc].ownerID The owner's id registered in items for the specific item
        verifyCaller(items[_upc].ownerID)
        onlyFarmer
    {
        /// @dev Update the appropriate fields
        items[_upc].itemState = State.Processed;

        /// @dev Emit the appropriate event
        emit Processed(_upc);
    }

    /// @dev Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    /// @param _upc UPC to select a specific item from mapping items
    function packItem(uint256 _upc)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        processed(_upc)
        /// @dev Call modifier to verify caller of this function
        verifyCaller(items[_upc].originFarmerID)
        onlyFarmer
    {
        /// @dev Update the appropriate fields
        items[_upc].itemState = State.Packed;
        /// @dev Emit the appropriate event
        emit Packed(_upc);
    }

    /// @dev Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    /// @param _upc UPC to select a specific item from mapping items
    /// @param _price The amount to set the price of the item
    function sellItem(uint256 _upc, uint256 _price)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        packed(_upc)
        /// @dev Call modifier to verify caller of this function
        verifyCaller(items[_upc].originFarmerID)
        onlyFarmer
    {
        /// @dev Update the appropriate fields
        items[_upc].productPrice = _price;
        items[_upc].itemState = State.ForSale;
        /// @dev Emit the appropriate event
        emit ForSale(_upc);
    }

    /**  @dev Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
     * Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
     * and any excess ether sent is refunded back to the buyer
     */
    function buyItem(uint256 _upc)
        public
        payable
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        forSale(_upc)
        /// @dev Call modifer to check if buyer has paid enough
        paidEnough(items[_upc].productPrice)
        /// @dev Call modifer to send any excess ether back to buyer
        checkValue(_upc)
        onlyDistributor
    {
        /// @dev Update the appropriate fields - ownerID, distributorID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;
        /// @dev Transfer money to farmer
        items[_upc].originFarmerID.transfer(items[_upc].productPrice);
        /// @dev emit the appropriate event
        emit Sold(_upc);
    }

    /** @dev Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
     * Use the above modifers to check if the item is sold
     * @param _upc UPC to select a specific item from mapping items
     */
    function shipItem(uint256 _upc)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        sold(_upc)
        /// @dev Call modifier to verify caller of this function
        verifyCaller(items[_upc].distributorID)
    {
        /// @dev Update the appropriate fields
        items[_upc].itemState = State.Shipped;
        /// @dev Emit the appropriate event
        emit Shipped(_upc);
    }

    /** @dev Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
     * Use the above modifiers to check if the item is shipped
     * @param _upc UPC to select a specific item from mapping items
     */
    function receiveItem(uint256 _upc)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        shipped(_upc)
        /// @dev Access Control List enforced by calling Smart Contract / DApp
        onlyRetailer
    {
        /// @dev Update the appropriate fields - ownerID, retailerID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.Received;
        /// @dev Emit the appropriate event
        emit Received(_upc);
    }

    /**  @dev Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
     * Use the above modifiers to check if the item is received
     * @param _upc UPC to select a specific item from mapping items
     */
    function purchaseItem(uint256 _upc)
        public
        /// @dev Call modifier to check if upc has passed previous supply chain stage
        received(_upc)
        /// @dev Access Control List enforced by calling Smart Contract / DApp
        onlyConsumer
    {
        /// @dev Update the appropriate fields - ownerID, consumerID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Purchased;
        /// @dev Emit the appropriate event
        emit Purchased(_upc);
    }

    /// @dev Define a function 'fetchItemBufferOne' that fetches the data
    /// @param _upc UPC to select a specific item from mapping items
    /// @return itemSKU
    /// @return itemUPC
    /// @return ownerID
    /// @return originFarmerID
    /// @return originFarmName
    /// @return originFarmInformation
    /// @return originFarmLatitude
    /// @return originFarmLongitude
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        /// @dev Assign values to the 8 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        ownerID = items[_upc].ownerID;
        originFarmerID = items[_upc].originFarmerID;
        originFarmName = items[_upc].originFarmName;
        originFarmInformation = items[_upc].originFarmInformation;
        originFarmLatitude = items[_upc].originFarmLatitude;
        originFarmLongitude = items[_upc].originFarmLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    /// @dev Define a function 'fetchItemBufferTwo' that fetches the data
    /// @param _upc UPC to select a specific item from mapping items
    /// @return itemSKU
    /// @return itemUPC
    /// @return productID
    /// @return productNotes
    /// @return productPrice
    /// @return itemState
    /// @return distributorID
    /// @return retailerID
    /// @return consumerID
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        /// @dev Assign values to the 9 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        productID = items[_upc].productID;
        productNotes = items[_upc].productNotes;
        productPrice = items[_upc].productPrice;
        itemState = uint256(items[_upc].itemState);
        distributorID = items[_upc].distributorID;
        retailerID = items[_upc].retailerID;
        consumerID = items[_upc].consumerID;

        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID
        );
    }
}

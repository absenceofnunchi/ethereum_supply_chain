// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
let SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  let sku = 1;
  let upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  let productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.utils.toWei("1", "ether");
  let itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed(ownerID);

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Harvested()
    await supplyChain.contract.events.Harvested(function () {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes
    );

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[2],
      originFarmerID,
      "Error: Missing or Invalid ownerID"
    );
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Processed()
    await supplyChain.contract.events.Processed(function () {
      eventEmitted = true;
    });

    // Mark an item as Processed by calling function processtItem()
    supplyChain.addFarmer(originFarmerID);
    await supplyChain.processItem(upc, { from: originFarmerID, gasPrice: 0 });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[5], 1, "Error: Invalid item state");
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Packed()
    await supplyChain.contract.events.Packed(function () {
      eventEmitted = true;
    });

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID, gasPrice: 0 });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[5], 2, "Error: Invalid itemState");
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event ForSale()
    await supplyChain.contract.events.ForSale(function () {
      eventEmitted = true;
    });

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
      gasPrice: 0,
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(
      resultBufferTwo[4],
      web3.utils.toWei("1", "ether"),
      "Error: Invalid productPrice"
    );
    assert.equal(resultBufferTwo[5], 3, "Error: Invalid itemState");
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Sold()
    await supplyChain.contract.events.Sold(function () {
      eventEmitted = true;
    });

    // Mark an item as Sold by calling function buyItem()
    supplyChain.addDistributor(distributorID);
    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
      gasPrice: 0,
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(
      resultBufferTwo[4],
      productPrice,
      "Error: Invalid productPrice"
    );
    assert.equal(resultBufferTwo[5], 4, "Error: Invalid itemState");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Invalid distributorID"
    );
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Shipped()
    await supplyChain.contract.events.Shipped(function () {
      eventEmitted = true;
    });

    // Mark an item as Shipped by calling function shipItem()
    await supplyChain.shipItem(upc, { from: distributorID, gasPrice: 0 });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid price");
    assert.equal(resultBufferTwo[5], 5, "Error: Invalid itemState");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Invalid distributorID"
    );
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Received()
    await supplyChain.contract.events.Received(function () {
      eventEmitted = true;
    });

    // Mark an item as Received by calling function received()
    supplyChain.addRetailer(retailerID);
    await supplyChain.receiveItem(upc, { from: retailerID, gasPrice: 0 });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid price");
    assert.equal(resultBufferTwo[5], 6, "Error: Invalid itemState");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Invalid distributorID"
    );
    assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid retailerID");
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Purchased()
    await supplyChain.contract.events.Purchased(function () {
      eventEmitted = true;
    });

    // Mark an item as Purchased by calling function purchaseItem()
    supplyChain.addConsumer(consumerID);
    await supplyChain.purchaseItem(upc, { from: consumerID, gasPrice: 0 });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], consumerID, "Error: Invalid OwnerID");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid price");
    assert.equal(resultBufferTwo[5], 7, "Error: Invalid itemState");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Invalid distributorID"
    );
    assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid retailerID");
    assert.equal(resultBufferTwo[8], consumerID, "Error: Invalid consumerID");
    assert.equal(eventEmitted, true, "Error: Invalid event emitted");
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], consumerID, "Error: Invalid OwnerID");
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid UPC");
    assert.equal(resultBufferTwo[2], upc + sku, "Error: Invalid productID");
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Invalid productNotes"
    );
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid price");
    assert.equal(resultBufferTwo[5], 7, "Error: Invalid itemState");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Invalid distributorID"
    );
    assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid retailerID");
    assert.equal(resultBufferTwo[8], consumerID, "Error: Invalid consumerID");
  });
});
